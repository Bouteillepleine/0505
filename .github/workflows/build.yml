name: Build

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: Setup System
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          sudo apt update && sudo apt install -y python3 python-is-python3
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Merge BBRv3 into Kernel
        run: |
          echo "Ensuring CONFIG is set..."
          if [ -z "$CONFIG" ]; then
            echo "Error: CONFIG environment variable is not set"
            exit 1
          fi

          echo "Changing to the common directory..."
          cd "$CONFIG/kernel_platform/common" || { echo "Error: Cannot change to $CONFIG/kernel_platform/common"; exit 1; }

          echo "Verifying Git repository..."
          git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo "Error: $CONFIG/kernel_platform/common is not a Git repository"; exit 1; }

          echo "Checking for uncommitted changes and stashing them..."
          if git status --porcelain | grep .; then
            echo "Stashing local changes to avoid merge conflicts"
            git stash push -m "Temporary stash before BBRv3 merge" || { echo "Error: Failed to stash changes"; exit 1; }
          fi

          echo "Configuring Git identity..."
          git config --global user.email "q543069760@gmail.com"
          git config --global user.name "Build"

          echo "Adding BBR remote (idempotent)..."
          git remote add google-bbr https://github.com/google/bbr.git || true

          echo "Fetching BBRv3 branch with validation..."
          git fetch google-bbr v3 || { echo "Error: Failed to fetch google-bbr/v3"; exit 1; }

          if ! git show-ref --verify --quiet refs/remotes/google-bbr/v3; then
            echo "BBRv3 branch not found!"
            exit 1
          fi

          echo "Merging BBRv3 branch with no commit..."
          git merge google-bbr/v3 \
            --strategy=recursive \
            --strategy-option=patience \
            --allow-unrelated-histories \
            --no-commit || { echo "Merge failed"; git merge --abort; if git stash list | grep "Temporary stash before BBRv3 merge"; then git stash pop; fi; exit 1; }

          echo "Checking for merge conflicts..."
          if git diff --name-only --diff-filter=U | grep .; then
            echo "Merge conflicts detected. Resolving in favor of BBRv3 for critical files."
            git checkout --theirs -- \
              net/ipv4/tcp_bbr.c \
              net/ipv4/Kconfig \
              net/ipv4/Makefile \
              net/ipv4/sysctl_net_ipv4.c \
              include/net/tcp.h \
              include/uapi/linux/tcp.h \
              include/uapi/linux/inet_diag.h \
              include/linux/tcp.h \
              Documentation/networking/ip-sysctl.rst
            
            echo "Marking conflicts as resolved..."
            git add . || { echo "Error: Failed to stage resolved conflicts"; exit 1; }
          fi

          echo "Finalizing the merge..."
          git commit -m "Merged BBRv3 into kernel with conflict resolution" || { echo "Error: Failed to commit the merge"; exit 1; }

          echo "Restoring stashed changes (if any)..."
          if git stash list | grep "Temporary stash before BBRv3 merge"; then
            git stash pop || { echo "Error: Failed to apply stashed changes"; exit 1; }
          fi

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          echo "Building the kernel..."
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
