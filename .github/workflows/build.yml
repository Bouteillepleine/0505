name: Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: Setup System
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - name: Install Repo and Python
        run: |
          # Install dependencies
          sudo apt update
          sudo apt install -y python3 python-is-python3
          
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.model }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
          
          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast
      
      - name: Add KernelSU Next
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding KernelSU Next..."
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          
          git submodule update --init --recursive

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cd ./KernelSU-Next
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ] || [ "${{ inputs.ksun_branch }}" == "next" ]; then
            echo "Applying next SUSFS patches..."
            cp ../../../kernel_patches/next/kernel-patch-susfs-v1.5.7-to-KernelSU-Next.patch ./ksun_susfs_latest.patch
            patch -p1 --forward < ksun_susfs_latest.patch || true
          fi
          
          # Determine base version based on branch
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            BASE_VERSION=10200
          elif [ "${{ inputs.ksun_branch }}" == "next" ]; then
            BASE_VERSION=10200
          elif [ "${{ inputs.ksun_branch }}" == "next-susfs" ]; then
            BASE_VERSION=10198
          elif [ "${{ inputs.ksun_branch }}" == "next-susfs-dev" ]; then
            BASE_VERSION=10198
          else
            BASE_VERSION=10200
          fi
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
          
          # Change to common directory and apply SUSFS patch
          cd ../../common
          if [ "${{ inputs.soc }}" == "sun" ]; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

      - name: Apply KSUN Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          echo "Applying KSUN Hooks..."
          cp ../../../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 --fuzz=3 < ./syscall_hooks.patch
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          # Apply additional patch
          cp ../../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # ── Additional Netfilter Options ──
          echo "CONFIG_WIREGUARD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig      
          
           # ── Strip debug to reduce size ──
          echo "CONFIG_DEBUG_KERNEL=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DYNAMIC_DEBUG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEBUG_INFO=n" >> ./common/arch/arm64/configs/gki_defconfig     
          
      - name: Add BBR Configuration Settings
        run: |
          cd "$CONFIG/kernel_platform"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_CDG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_CDG=n" >> ./common/arch/arm64/configs/gki_defconfig          
          echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_HTB=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_PRIO=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_SFQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_TBF=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig

          # ── ECN config setting ──
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IPV6_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig     
          
      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Running sed commands..."
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
          
          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "\$res"|' ./common/scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "\$res"|' ./msm-kernel/scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "\$res"|' ./external/dtc/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
          
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh
         
          # Run perl command to modify UTS_VERSION
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Thu Mar 05 04:20:00 UTC 2025"}' ./common/scripts/mkcompile_h
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Thu Mar 05 04:20:00 UTC 2025"}' ./msm-kernel/scripts/mkcompile_h
          
          find . -type f -exec sed -i 's/\(make\s\+-C[^\n]*\)\s\+/\1 -j$(nproc) /g' {} +

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          # Clear Cache
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT
          
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Copying Image"
          cp ./out/dist/Image ../AnyKernel3/Image
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            cp ./out/dist/dtbo.img ../AnyKernel3/
            cp ./out/dist/system_dlkm.erofs.img ../AnyKernel3/system_dlkm.img
            # cp ./out/dist/vendor_dlkm.img ../AnyKernel3/
            # cp ./out/dist/vendor_boot.img ../AnyKernel3/
          fi
     
      - name: Integrate Magisk Module
  run: |
    echo "Creating Magisk module structure in AnyKernel3..."
    cd ./AnyKernel3
    
    # Create module directory
    MODULE_DIR="modules/kernel_enable"
    mkdir -p "$MODULE_DIR"
    
    # Create module.prop
    cat > "$MODULE_DIR/module.prop" << 'EOF' || exit 1
id=kernel_enable
name=Kernel_optimization
version=1.2
versionCode=12
author=xx
description=✅ Enables kernel optimization
EOF
    
    # Create post-fs-data.sh
    cat > "$MODULE_DIR/post-fs-data.sh" << 'EOF' || exit 1
#!/system/bin/sh

# Improve Mem TCP
sysctl -w net.ipv4.tcp_rmem='524288 1048576 2097152'
sysctl -w net.ipv4.tcp_wmem='524288 1048576 2097152'
sysctl -w net.ipv6.tcp_rmem='524288 1048576 2097152'
sysctl -w net.ipv6.tcp_wmem='524288 1048576 2097152'

# Reduce TCP latency
sysctl -w net.ipv4.tcp_slow_start_after_idle=0
sysctl -w net.ipv4.tcp_no_metrics_save=1
sysctl -w net.ipv4.tcp_mtu_probing=1

resetprop ro.boot.vbmeta.invalidate_on_error yes
EOF
    
    # Create persist.prop
    cat > "$MODULE_DIR/persist.prop" << 'EOF' || exit 1
# persist debug
persist.sys.assert.state=false
persist.sys.alwayson.enable=false
persist.sys.debug.layer_trace.enable=false
persist.sys.oplus.perfrecord=false
persist.sys.oplus_trace=0
persist.sys.oplus.theia_screen_monitor.disabled=1
persist.sys.oplus.ostats.labmode.enable=0
persist.sys.oplus.cvt.manager=0
persist.sys.ostatsd.enable=0
persist.sys.ostats_tpd.enable=0
persist.sys.ostats_pullerd.enable=0
persist.sys.ood.enable=0
persist.sys.midasd.enable=0
persist.vendor.ims.disableDebugLogs=1
persist.vendor.ims.disableIMSLogs=1
persist.vendor.ims.disableQXDMLogs=1
EOF
    
    # Create qcom.prop
    cat > "$MODULE_DIR/qcom.prop" << 'EOF' || exit 1
# Disable CoreSight
persist.debug.coresight.config=

# QCOM Use oryon as processor target for ART and Bionic
dalvik.vm.isa.arm64.features=runtime
dalvik.vm.isa.arm64.variant=oryon
ro.bionic.cpu_variant=oryon

# Log
persist.logd.diag.tcpdump=false
persist.sys.qseelogd=false
persist.sys.ssr.enable_debug=false
vendor.bluetooth.startbtlogger=false

# QCOM DDR power saving
vendor.chre.enabled=true
vendor.pasr.enabled=true  # Uncommented as recommended
EOF
    
    # Create oplus.prop (corrected formatting)
    cat > "$MODULE_DIR/oplus.prop" << 'EOF' || exit 1
## Oneplus Shit trimming
## From:
## DoC:

# Debug and Logs
debug.sf.oplus_display_trace.enable=false
debug.vendor.perf.smart_touch.trace=false
persist.sys.oplus.need_log=false
persist.sys.ostats_pullerd.enable=false
persist.sys.ostats_tpd.enable=false
persist.sys.ostatsd.enable=false
persist.sys.ssr.enable_debug=false
persist.vendor.corectl.debug.config=false
persist.vendor.sys.rawdump_copy=false
persist.vendor.tracing.hsuart.enabled=false
ro.oplus.minidump.kernel.log.support=false
ro.oplus.wifi.minidump.enable.state=false

# Scheduler, freq controllers
persist.sys.janktracker.enable=false
persist.sys.obrain_obfuscate.enable=false
persist.sys.ocenter.enable=false
persist.sys.oiface.enable=false
persist.sys.oplus.opt.ui_thread=false
ro.oplus.camera.defercap.support=false

# Thermal
oplus.dex.tempcontrol=false
persist.sys.oplus.wifi.sla.game_high_temperature=100
ro.oplus.audio.thermal_control=false

# Memory management
persist.sys.osense.dump=true
ro.oplus.osense.uaf_enable=false
persist.oplus.ocompiler=0
persist.oplus.zygote_ocomp=0
# persist.sys.atomic.enable=0
persist.sys.lmk.oplus.kill_memleak_process=0
persist.sys.oplus.lmkd_super_critical_threshold_8g=1
persist.sys.oplus.lmkd_super_critical_threshold_12g=1
persist.sys.oplus.lmkd_super_critical_threshold_16g=1
persist.sys.oplus.lmkd_super_critical_threshold_24g=1
persist.sys.oplus.lmkd_super_critical_threshold_rus_8g=1
persist.sys.oplus.lmkd_super_critical_threshold_rus_12g=1
persist.sys.oplus.lmkd_super_critical_threshold_rus_16g=1
persist.sys.oplus.lmkd_super_critical_threshold_rus_24g=1
persist.vendor.enable.preload=false
sys.lmk.oplus.force_use_old_strategy=0
sys.oplus.lmk.anon.opt=0
sys.oplus.lmk.change_limit=0
sys.oplus.lmk_killed_memleak_pid=0
sys.oplus.vm.oplus_compact_memory=0
sys.priority.optimize.enable=0
ro.lmk.enable_watermark_check=0
ro.lmk.filecache_min_kb=4
ro.lmk.nstrat_psi_complete_ms=850
ro.lmk.nstrat_psi_partial_ms=250
ro.lmk.nstrat_wmark_boost_factor=15000
ro.lmk.psi_scrit_complete_stall_ms=999
ro.lmk.super_critical=0
ro.lmk.use_new_strategy_dup=1
ro.lmk.use_minfree_levels_dup=0

# Misc shits
persist.sys.hardcoder.name=
persist.sys.oem_smooth=false
persist.sys.oplus.cvt.manager=false
persist.sys.oppo.junkmonitor=false
persist.sys.tasktracker.enable=false
sys.oplus.cvt.enable=false

# ART Optimizations
vendor.oplus.dalvik.vm.heapgrowthlimit=512m
vendor.oplus.dalvik.vm.heapmaxfree=32m
vendor.oplus.dalvik.vm.heapminfree=512k
vendor.oplus.dalvik.vm.heapsize=512m
vendor.oplus.dalvik.vm.heapstartsize=2m
vendor.oplus.dalvik.vm.heaptargetutilization=0.8
EOF
    
    # Create system.prop (corrected formatting)
    cat > "$MODULE_DIR/system.prop" << 'EOF' || exit 1
# BBR
net.ipv4.tcp_congestion_control=bbr
net.core.default_qdisc=fq

# dex2oat Optimizations
dalvik.vm.background-dex2oat-cpu-set=0,1,2,3,4,5,6,7
dalvik.vm.background-dex2oat-threads=8
dalvik.vm.boot-dex2oat-cpu-set=0,1,2,3,4,5,6,7
dalvik.vm.boot-dex2oat-threads=8
dalvik.vm.dex2oat-cpu-set=0,1,2,3,4,5,6,7
dalvik.vm.dex2oat-swap=true
dalvik.vm.dex2oat-threads=8
dalvik.vm.image-dex2oat-cpu-set=0,1,2,3,4,5,6,7
dalvik.vm.image-dex2oat-threads=8
dalvik.vm.restore-dex2oat-cpu-set=0,1,2,3,4,5,6,7
dalvik.vm.restore-dex2oat-threads=8
dalvik.vm.madvise.artfile.size=2147483647
dalvik.vm.madvise.odexfile.size=2147483647
dalvik.vm.madvise.vdexfile.size=2147483647
dalvik.vm.systemservercompilerfilter=everything
dalvik.vm.systemuicompilerfilter=everything

# dex2oat Trigger
pm.dexopt.ab-ota=verify
pm.dexopt.bg-dexopt=everything
pm.dexopt.boot-after-ota=verify
pm.dexopt.boot-after-mainline-update=verify
pm.dexopt.cmdline=everything
pm.dexopt.downgrade_after_inactive_days=30
pm.dexopt.first-boot=verify
pm.dexopt.first-use=verify
pm.dexopt.inactive=verify
pm.dexopt.install=everything
pm.dexopt.install-bulk=everything
pm.dexopt.install-bulk-downgraded=everything
pm.dexopt.install-bulk-secondary=everything
pm.dexopt.install-bulk-secondary-downgraded=everything
pm.dexopt.install-fast=verify
pm.dexopt.post-boot=verify
pm.dexopt.shared=everything

# Misc ART optimizations
dalvik.vm.backgroundgctype=HSpaceCompact
dalvik.vm.dex2oat-minidebuginfo=false
dalvik.vm.foreground-heap-growth-multiplier=2.5
dalvik.vm.gctype=CMC
dalvik.vm.heapgrowthlimit=512m
dalvik.vm.heapmaxfree=32m
dalvik.vm.heapminfree=512k
dalvik.vm.heapsize=512m
dalvik.vm.heapstartsize=2m
dalvik.vm.heaptargetutilization=0.8
dalvik.vm.minidebuginfo=false
dalvik.vm.usap_pool_enabled=true
dalvik.vm.usap_pool_refill_delay_ms=3000
dalvik.vm.usap_pool_size_max=3
dalvik.vm.usap_pool_size_min=1
dalvik.vm.usap_refill_threshold=1
persist.device_config.aconfig_flags.runtime_native_boot.disable_lock_profiling=true
persist.device_config.runtime_native_boot.enable_generational_cc=true
persist.device_config.runtime_native_boot.disable_lock_profiling=true
persist.device_config.runtime_native_boot.force_disable_uffd_gc=false
persist.device_config.runtime_native.usap_pool_enabled=true
ro.dalvik.vm.enable_uffd_gc=true

# LMKD
persist.device_config.aconfig_flags.lmkd_native.use_minfree_levels=false
persist.device_config.lmkd_native.use_minfree_levels=false
ro.lmk.psi_complete_stall_ms=900
ro.lmk.psi_partial_stall_ms=300
ro.lmk.swap_compression_ratio=5
ro.lmk.swap_free_low_percentage=0
ro.lmk.swap_util_max=100
ro.lmk.use_new_strategy=1
ro.lmk.use_psi=1

# AppCompact
persist.sys.use_boot_compact=false

# Surfaceflinger performance/power optimizations
debug.sf.auto_latch_unsignaled=0
debug.sf.latch_unsignaled=1
ro.surface_flinger.use_content_detection_for_refresh_rate=false

# Renderengine optimizations
debug.renderengine.backend=skiavkthreaded
debug.renderengine.vulkan=true
debug.stagefright.renderengine.backend=threaded
persist.sys.force_sw_gles=0

# HWUI optimizations
ro.hwui.use_vulkan=1

# FramePacing
vendor.perf.framepacing.enable=0

# Default enable MGLRU
persist.device_config.mglru_native.lru_gen_config=all

# Debug
debug.oplus.labmode_sys_ostats_trigger_trace=0
debug.oplus.labmode_data_ostats_continuous_trace=0
debug.ostats.bds.enable=0
debug.trace_size_limit_enable=true
sys.olc.service.on=false
sys.oplus.voldraise2olc=false
EOF
    
    # Set executable permissions
    chmod +x "$MODULE_DIR/post-fs-data.sh"
    
    echo "Magisk module created successfully in $MODULE_DIR"
          
          # Set executable permissions for post-fs-data.sh
          chmod +x "$MODULE_DIR/post-fs-data.sh"
          
          echo "Magisk module files created in $MODULE_DIR"
      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3
          
          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.model }}_${{ inputs.android_version }}_${{ inputs.kernel_version }}_Next_SUSFS_AnyKernel3.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          # Fengchi Patch for OPAce5Pro
          if [ "${{ inputs.model }}" == "OPAce5Pro" ]; then
            sed -i 's/hmbird/xxbird/g' dtbo.img
            zip -r "../$ZIP_NAME-CN-version.zip" ./*
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
